name: Deploy PR to Staging

env:
  ENV: staging
  PROJECT_ID: shopcat-stg-55606
  PROJECT_NUMBER: 575553836979
  ADYEN_ENV: TEST
  TANGRAM_MERCHANT_ROLE_ID: role_glukknwgdksyicql
  vendorpanel_BASE_URL: https://shopcat-staging-575553836979.europe-west1.run.app
  ADYEN_MERCHANT_ACCOUNT: CAT-Shop

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

jobs:
  deploy-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set PR service name
        id: pr-name
        run: |
          PR_NUMBER=${{ github.event.number }}
          SERVICE_NAME="shopcat-vendorpanel-pr-${PR_NUMBER}"
          echo "service_name=${SERVICE_NAME}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/checkatrade-github-actions/providers/shopcat"
          service_account: "gha-shopcat@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
          create_credentials_file: true
          export_environment_variables: true
          token_format: "access_token"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        run: |
          # Get short SHA for the image tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          PR_NUMBER=${{ github.event.number }}

          # Configure Docker to use gcloud credentials
          gcloud auth configure-docker europe-west1-docker.pkg.dev

          # Build and push the Docker image
          docker build \
            --build-arg NEXT_PUBLIC_ENV=${{ env.ENV }} \
            --build-arg NEXT_PUBLIC_ADYEN_ENVIRONMENT=${{ inputs.adyen_env }} \
            --build-arg NEXT_PUBLIC_ADYEN_CLIENT_KEY=${{ inputs.adyen_client_key }} \
            -t europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/shopcat/shopcat-vendorpanel:pr-${PR_NUMBER}-${SHORT_SHA} \
            .
          docker push europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/shopcat/shopcat-vendorpanel:pr-${PR_NUMBER}-${SHORT_SHA}

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          PR_NUMBER=${{ github.event.number }}
          SERVICE_NAME="${{ steps.pr-name.outputs.service_name }}"

          # Deploy to Cloud Run with environment variables
          gcloud run deploy ${SERVICE_NAME} \
            --image europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/shopcat/shopcat-vendorpanel:pr-${PR_NUMBER}-${SHORT_SHA} \
            --region europe-west1 \
            --platform managed \
            --allow-unauthenticated \
            --tag pr-${PR_NUMBER} \

      - name: Set IAM policy for public access
        run: |
          SERVICE_NAME="${{ steps.pr-name.outputs.service_name }}"
          gcloud run services add-iam-policy-binding ${SERVICE_NAME} \
            --region=europe-west1 \
            --member=allUsers \
            --role=roles/run.invoker

      - name: Get deployment URL
        id: deployment-url
        run: |
          SERVICE_NAME="${{ steps.pr-name.outputs.service_name }}"
          URL=$(gcloud run services describe ${SERVICE_NAME} --region europe-west1 --format='value(status.url)')
          echo "url=${URL}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deployment-url.outputs.url }}';
            const comment = `ðŸš€ **Preview deployment ready!**

            Your changes have been deployed to: ${url}

            This preview will be automatically cleaned up when the PR is closed.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Set PR service name
        id: pr-name
        run: |
          PR_NUMBER=${{ github.event.number }}
          SERVICE_NAME="shopcat-vendorpanel-pr-${PR_NUMBER}"
          echo "service_name=${SERVICE_NAME}" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/checkatrade-github-actions/providers/shopcat"
          service_account: "gha-shopcat@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
          create_credentials_file: true
          export_environment_variables: true
          token_format: "access_token"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Delete preview deployment
        run: |
          SERVICE_NAME="${{ steps.pr-name.outputs.service_name }}"
          PR_STATE="${{ github.event.pull_request.merged && 'merged' || 'closed' }}"

          echo "PR #${{ github.event.number }} was ${PR_STATE}, cleaning up preview deployment"

          # Check if service exists before trying to delete
          if gcloud run services describe ${SERVICE_NAME} --region europe-west1 >/dev/null 2>&1; then
            echo "Deleting preview service: ${SERVICE_NAME}"
            gcloud run services delete ${SERVICE_NAME} --region europe-west1 --quiet
            echo "Successfully deleted preview service: ${SERVICE_NAME}"
          else
            echo "Preview service ${SERVICE_NAME} not found, skipping deletion"
          fi

      - name: Delete Docker images
        run: |
          PR_NUMBER=${{ github.event.number }}

          # List and delete images with the PR tag
          IMAGES=$(gcloud artifacts docker images list europe-west1-docker.pkg.dev/${{ env.PROJECT_ID }}/shopcat/shopcat-vendorpanel --filter="tags:pr-${PR_NUMBER}*" --format="value(IMAGE)" || true)

          if [ ! -z "$IMAGES" ]; then
            echo "Deleting Docker images for PR ${PR_NUMBER}"
            echo "$IMAGES" | xargs -r gcloud artifacts docker images delete --quiet
          else
            echo "No Docker images found for PR ${PR_NUMBER}"
          fi
